<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd 
        http://www.springframework.org/schema/task   
        http://www.springframework.org/schema/task/spring-task-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd"
       xmlns:aop="http://www.springframework.org/schema/aop"
       default-lazy-init="true">

    <context:component-scan base-package="com.analytic.portal">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    
    <bean class="com.analytic.portal.security.EncryptPropertyPlaceholderConfigurer">  
    <property name="encryptPropNames">  
        <list>  
            <value>hibernate.connection.username</value>  
            <value>hibernate.connection.password</value>  
        </list>  
    </property>  
    <property name="locations">  
        <list>  
            <value>classpath*:/hibernate.properties</value>  
        </list>  
    </property>  
    </bean>  

    <!-- ========================= Start of PERSISTENCE DEFINITIONS ========================= -->
    <!-- <bean id="placeholderConfig" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                数据库配置
                <value>classpath*:/hibernate.properties</value>
            </list>
        </property>
    </bean> -->
    <!-- 定义数据源-->
    <!-- Choose the dialect that matches your "dataSource" definition -->

    <!-- dbcp方式 -->
    <!-- <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="${hibernate.connection.driver_class}"/>
        <property name="url" value="${hibernate.connection.url}"/>
        <property name="username" value="${hibernate.connection.username}"/>
        <property name="password" value="${hibernate.connection.password}"/>
        <property name="maxActive" value="${hibernate.connection.maxActive}"/>连接池的最大活动个数
        <property name="maxIdle" value="${hibernate.connection.maxIdle}"/>最大空闲数
        <property name="maxWait" value="${hibernate.connection.maxWait}"/>连接的最大等待时间,单位为毫秒
    </bean> -->
    <!-- c3p0 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		 <property name="driverClass" value="${hibernate.connection.driver_class}"/>
		 <property name="jdbcUrl" value="${hibernate.connection.url}"/>
		 <property name="user" value="${hibernate.connection.username}"/>
		 <property name="password" value="${hibernate.connection.password}"/>
		 <property name="maxPoolSize" value="100"/>
		 <property name="minPoolSize" value="10"/>
		 <property name="initialPoolSize" value="30"/>
		 <property name="maxIdleTime" value="60"/>
		 <property name="acquireIncrement"  value="10"/>    
		 <property name="maxStatements"  value="0"/>    
		 <property name="idleConnectionTestPeriod"  value="60"/>    
		 <property name="testConnectionOnCheckout" value="false" />
		 <property name="breakAfterAcquireFailure"  value="true"/>  
         <property name="acquireRetryAttempts" value="30"/>
         <property name="acquireRetryDelay" value="100" />
     </bean>

    <bean id="nativejdbcExtractor" class="org.springframework.jdbc.support.nativejdbc.CommonsDbcpNativeJdbcExtractor"/>

    <bean id="oracleLobHandle" class="org.springframework.jdbc.support.lob.OracleLobHandler">
        <property name="nativeJdbcExtractor">
            <ref local="nativejdbcExtractor"/>
        </property>
    </bean>
    
    <!-- <bean id="handlerExceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
    <property name="exceptionMappings">
        <props>
            <prop key="com.analytic.portal.common.resolver.AuthorizationException">redirect:/sysUsers/login.do</prop>
        </props>
    </property>
    </bean> -->
    
    <!-- 和Hibernate联系起来-->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
        <property name="dataSource">
            <ref local="dataSource"/>
        </property>
        <!-- <property name=" packagesToScan " value="  "></property> -->

        <!-- 		<property name="mappingResources">
                    <list><value>classpath:/com/analytic/portal/module/system.model/SysUser</value></list>
                </property>
         -->
        <property name="mappingDirectoryLocations">
            <list>
                <value>classpath:/com/analytic/portal/module/**/model/</value>
            </list>
        </property>

        <!--         <property name="annotatedClasses">
                    <list>
                        <value>com.analytic.portal.module.system.model.SysUser</value>
                    </list>
                </property>
         -->
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="hibernate.jdbc.fetch_size">${hibernate.jdbc.fetch_size}</prop>
                <prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
                <!-- <prop key="hibernate.query.factory_class">org.hibernate.hql.classic.ClassicQueryTranslatorFactory</prop> -->
                <prop key="hibernate.current_session_context_class">
                    org.springframework.orm.hibernate3.SpringSessionContext
                </prop>

            </props>
        </property>
        <property name="lobHandler">
            <ref bean="oracleLobHandle"/>
        </property>
    </bean>
    <bean id="iBaseDao" class="com.analytic.portal.module.common.dao.impl.BaseDaoImp">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <bean id="spring" class="com.analytic.portal.common.filter.SpringContextUtil" lazy-init="false"/>

    <!-- 进行事务处理-->
    <!-- ======================================= transactionManager ==================================-->
    <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory">
            <ref local="sessionFactory"/>
        </property>
    </bean>

    <!-- 事务管理器配置,单数据源事务 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 对get/load/search开头的方法要求只读事务 -->
            <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="load*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="show*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="search*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="query*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="select*" propagation="SUPPORTS" read-only="true"/>
            <!-- 对其它方法要求事务 -->
            <tx:method name="*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>

    <!-- <aop:config/> 的定义，确保由txAdvice bean定义的事务通知在应用中具体点被执行 -->
    <aop:config>
        <!-- 在com.nevin.service包下面的所有对象拥有默认的事务语义 ，前面的*表示任意返回类型，倒数第二个表示任意类，第三个表示任意方法 -->
        <aop:pointcut id="ServiceMethods"
                      expression="execution(* com.analytic.portal.module.*.service.impl.*.*(..))"/>
        <!-- 用通知器advisor把txAdvice和执行事务语义的地方绑定在一起 -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="ServiceMethods"/>
    </aop:config>

    <!-- 使Spring关注Annotation -->
    <context:annotation-config/>
    
     <!-- jobs -->
	<task:annotation-driven/> 
    <!--
     <import resource="applicationContext-cache.xml" />
    analytic/portal
-->
</beans>
